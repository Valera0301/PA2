// Вершинний шейдер
const vertexShaderSource = `
attribute vec3 vertex;    // Вершина об'єкта
attribute vec3 normal;    // Нормаль до поверхні

uniform mat4 ModelViewProjectionMatrix; // Матрична трансформація для переходу до простору кліпу
uniform mat4 ModelViewMatrix;           // Матрична трансформація для простору моделі

varying vec3 vNormal;    // Передача нормалей у фрагментний шейдер
varying vec3 vPosition;  // Передача позицій вершин у фрагментний шейдер

void main() {
    // Перетворення нормалі у простір моделі 
    vNormal = mat3(ModelViewMatrix) * normal;

    // Обчислення позиції вершини у просторі моделі
    vPosition = (ModelViewMatrix * vec4(vertex, 1.0)).xyz;

    // Перетворення вершини у простір кліпу для малювання
    gl_Position = ModelViewProjectionMatrix * vec4(vertex, 1.0);  
}
`;

// Фрагментний шейдер
const fragmentShaderSource = `
#ifdef GL_FRAGMENT_PRECISION_HIGH
   precision highp float; // Висока точність для фрагментів
#else
   precision mediump float; // Середня точність, якщо висока недоступна
#endif

uniform vec4 color;            // Колір поверхні (RGBA)
uniform vec3 lightPosition;    // Позиція джерела світла у просторі моделі
uniform vec3 viewPosition;     // Позиція спостерігача (камери)
uniform float ambientStrength; // Інтенсивність навколишнього освітлення
uniform float specularStrength; // Інтенсивність спекулярного освітлення
uniform float shininess;       // Шорсткість поверхні

varying vec3 vNormal;          // Інтерпольовані нормалі
varying vec3 vPosition;        // Інтерпольовані позиції вершин

void main() {
    // Нормалізуємо нормаль
    vec3 normal = normalize(vNormal);

    // Вектор до джерела світла
    vec3 lightDir = normalize(lightPosition - vPosition);

    // Вектор до спостерігача
    vec3 viewDir = normalize(viewPosition - vPosition);

    // Ambient освітлення
    vec3 ambient = ambientStrength * color.rgb;

    // Diffuse освітлення (Lambertian reflection)
    float diff = max(dot(normal, lightDir), 0.0);
    vec3 diffuse = diff * color.rgb;

    // Specular освітлення (модель Фонга)
    vec3 reflectDir = reflect(-lightDir, normal); // Напрямок відбиття світла
    float spec = pow(max(dot(viewDir, reflectDir), 0.0), shininess);
    vec3 specular = specularStrength * spec * vec3(1.0); // Білий колір для спекулярного блиску

    // Підсумковий колір пікселя
    vec3 finalColor = ambient + diffuse + specular;

    // Встановлення фінального кольору з альфа-каналом
    gl_FragColor = vec4(finalColor, color.a);
}

`;
